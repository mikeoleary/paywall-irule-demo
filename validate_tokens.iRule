when RULE_INIT {
    set static::stripe_redirect_url "https://demo.my-f5.com/pricing"
    set static::validate_tokens_debug 1
    set static::entitlement_token_ttl 3600  ;# 1 hour TTL for cache
    set static::shared_token_secret "MySharedWebhookKey123"  ;# Secret to secure webhook push
    log local0. "Paywall iRule with table-only entitlement token caching initialized"
}

when HTTP_REQUEST {
    set path [string tolower [HTTP::path]]
    set uri [string tolower [HTTP::uri]]

    # ✅ Token ingest endpoint from webhook
    if { $path eq "/cache-token" && [HTTP::method] eq "POST" } {
        if { ![HTTP::header exists "X-Webhook-Secret"] || [HTTP::header "X-Webhook-Secret"] ne $static::shared_token_secret } {
            log local0. "Rejected token cache attempt — missing or invalid secret"
            HTTP::respond 403 content "Unauthorized"
            return
        }

        set content_length [HTTP::header "Content-Length"]
        if { $content_length > 0 } {
            HTTP::collect $content_length
        } else {
            HTTP::respond 400 content "No content"
            return
        }
        return
    }

    # ✅ Pass /stripe-webhook and /pricing to backend
    if { $uri starts_with "/stripe-webhook" || $path eq "/pricing" } {
        pool redis-pool-5000
        return
    }

    # ✅ Check premium entitlement for protected endpoints
    if { [class match $path equals dg_premium_endpoints] } {
        if { $static::validate_tokens_debug } {
            log local0. "Received request from IP [IP::client_addr] for URI: $uri"
        }

        # 1. Extract entitlement token
        set token ""
        if { $uri contains "entitlement_token=" } {
            set token [URI::query $uri "entitlement_token"]
            if { $static::validate_tokens_debug } {
                log local0. "Token from query string: $token"
            }
        } elseif { [HTTP::header exists "X-Entitlement-Token"] } {
            set token [HTTP::header "X-Entitlement-Token"]
            if { $static::validate_tokens_debug } {
                log local0. "Token from header: $token"
            }
        }

        # 2. No token → redirect
        if { $token eq "" } {
            HTTP::uri "/pricing"
            HTTP::header insert "x-requested-endpoint" $path
            HTTP::header insert "x-price-id" [class match -value $path equals dg_premium_endpoints]
            pool redis-pool-5000
            return
        }

        # 3. Check local cache
        if { [table lookup "ent:$token"] eq "hyperlocal" } {
            if { $static::validate_tokens_debug } {
                log local0. "Token $token found in table cache. Access granted."
            }
            HTTP::header insert "X-Entitlement-Tier" "hyperlocal"
            return
        } else {
            if { $static::validate_tokens_debug } {
                log local0. "Token $token not found in cache. Redirecting."
            }
            HTTP::uri "/pricing"
            HTTP::header insert "x-requested-endpoint" $path
            HTTP::header insert "x-price-id" [class match -value $path equals dg_premium_endpoints]
            pool redis-pool-5000
            return
        }
    }
}

when HTTP_REQUEST_DATA {
    set payload [HTTP::payload]

    if { [regexp {"token"\s*:\s*"([a-zA-Z0-9]+)"} $payload -> token] } {
        table set "ent:$token" "hyperlocal" $static::entitlement_token_ttl
        log local0. "Cached entitlement token $token with 1h TTL via /cache-token"
        HTTP::respond 200 content "Token cached"
    } else {
        log local0. "Failed to extract token from payload: $payload"
        HTTP::respond 400 content "Missing or invalid token"
    }
}
